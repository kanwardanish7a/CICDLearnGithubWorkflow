name: .NET CORE CI/CD Pipeline

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

env:
    DOTNET_VERSION: '8.0.x'
    AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}
    BUILD_CONFIGURATION: 'Release'
    PUBLISH_OUTPUT_DIR: './publish'

jobs:
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest

        steps:
            # Checkout code
            - name: Checkout repository
              uses: actions/checkout@v4
            
            # Cache NuGet packages
            - name: Cache NuGet Packages
              uses: actions/cache@v3
              with:
                path: |
                    ~/.nuget/packages
                    **/bin/
                    **/obj/
                key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                restore-keys: |
                    ${{ runner.os }}-nuget-

            # Setup .NET SDK
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}  # Fixed syntax
                
            # Restore dependencies
            - name: Restore dependencies
              run: dotnet restore
              env:
                DOTNET_CLI_TELEMETRY_OPTOUT: 1

            # Build solution
            - name: Build Solution
              run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity normal

            # Run tests
            - name: Run tests
              run: dotnet test --no-build --verbosity normal

            # Publish with debug output
            - name: Publish Application
              run: |
                # Create publish directory if it doesn't exist
                mkdir -p ${{ env.PUBLISH_OUTPUT_DIR }}
                
                # Publish the application
                dotnet publish -c ${{ env.BUILD_CONFIGURATION }} -o ${{ env.PUBLISH_OUTPUT_DIR }} --no-build
                
                # Verify published files
                echo "Published files in ${{ env.PUBLISH_OUTPUT_DIR }}:"
                ls -la ${{ env.PUBLISH_OUTPUT_DIR }}
                echo "Total files: $(find ${{ env.PUBLISH_OUTPUT_DIR }} -type f | wc -l)"
                   
            # Upload build artifact
            - name: Upload build artifact
              uses: actions/upload-artifact@v4
              with: 
                name: dotnet-app
                path: ${{ env.PUBLISH_OUTPUT_DIR }}
    
    deploy-to-azure:
        name: Deploy to Azure App Service
        needs: build-and-test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'

        steps:
            # Download the build artifact
            - name: Download artifact
              uses: actions/download-artifact@v4
              with: 
                name: dotnet-app

            # Login to Azure
            - name: Azure Login
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            # Deploy to web app
            - name: App service deployment
              uses: azure/webapps-deploy@v2
              with: 
                app-name: ${{ env.AZURE_WEBAPP_NAME }}
                package: ${{ env.PUBLISH_OUTPUT_DIR }}/*  # Added wildcard

            # Verify API endpoint
            - name: Verify API Endpoint
              run: |
                echo "Testing deployed API..."
                API_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/weather"
                HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_URL)
                
                if [ $HTTP_STATUS -eq 200 ]; then
                    echo "API is responding successfully!"
                else
                    echo "API verification failed with status: $HTTP_STATUS"
                    exit 1
                fi